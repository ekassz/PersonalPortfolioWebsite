{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emili\\\\Desktop\\\\PersonalPortfolioWebsite\\\\src\\\\Components\\\\ProjectsCards\\\\DataScienceProjects.jsx\";\nimport { Row, Col, Container } from 'react-bootstrap';\nimport MadisonVisual from \"../../Assets/MadisonVisual.png\";\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBBtn } from 'mdb-react-ui-kit';\nimport './Projects.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataScienceProjects() {\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"aboutme\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center\",\n        children: \"Software Projects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"row-equal-height g-4\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xs: 12,\n          md: 4,\n          lg: 3,\n          children: /*#__PURE__*/_jsxDEV(MDBCard, {\n            className: \"project-card\",\n            border: \"danger\",\n            style: {\n              width: 'auto'\n            },\n            children: [/*#__PURE__*/_jsxDEV(MDBCardImage, {\n              src: MadisonVisual,\n              position: \"top\",\n              alt: \"linktree\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(MDBCardBody, {\n              children: [/*#__PURE__*/_jsxDEV(MDBCardTitle, {\n                children: \"Madison Visual\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 26,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(MDBCardText, {\n                children: \"I utilized geospatial processing libraries like GeoPandas to read and merge spatial data, and Matplotlib for visualizing population densities across the state. To predict population, I built and compared two machine learning models: a linear regression model and a polynomial regression model.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n                tag: \"a\",\n                href: \"https://github.com/ekassz/MadisonVisualization\",\n                className: \"stretched-link\",\n                children: \"Madison Visualization\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_c = DataScienceProjects;\nexport default DataScienceProjects;\nvar _c;\n$RefreshReg$(_c, \"DataScienceProjects\");","map":{"version":3,"names":["Row","Col","Container","MadisonVisual","MDBCard","MDBCardBody","MDBCardImage","MDBCardTitle","MDBCardText","MDBBtn","jsxDEV","_jsxDEV","DataScienceProjects","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","xs","md","lg","border","style","width","src","position","alt","tag","href","_c","$RefreshReg$"],"sources":["C:/Users/Emili/Desktop/PersonalPortfolioWebsite/src/Components/ProjectsCards/DataScienceProjects.jsx"],"sourcesContent":["import {Row, Col, Container} from 'react-bootstrap';\r\nimport MadisonVisual from \"../../Assets/MadisonVisual.png\";\r\nimport {\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardImage,\r\n  MDBCardTitle,\r\n  MDBCardText,\r\n  MDBBtn\r\n} from 'mdb-react-ui-kit';\r\nimport './Projects.css';\r\n\r\nfunction DataScienceProjects() {\r\n  return (\r\n    <section id=\"aboutme\">\r\n      <Container className=\"title\">\r\n      <h2 className='text-center'>Software Projects</h2>\r\n            <Row className='row-equal-height g-4'>\r\n              <Col xs={12} md={4} lg={3}>\r\n            <MDBCard className=\"project-card\" border=\"danger\" style={{ width: 'auto'}}>\r\n                <MDBCardImage\r\n                src={MadisonVisual}\r\n                position=\"top\"\r\n                alt=\"linktree\"/>\r\n                <MDBCardBody>\r\n                    <MDBCardTitle>Madison Visual</MDBCardTitle>\r\n                    <MDBCardText>\r\n                      I utilized geospatial processing libraries like GeoPandas to read and merge spatial data, and Matplotlib for visualizing population densities across the state. \r\n                      To predict population, I built and compared two machine learning models: a linear regression model and a polynomial regression model.\r\n                      </MDBCardText>\r\n                    <MDBBtn tag=\"a\" href=\"https://github.com/ekassz/MadisonVisualization\" className=\"stretched-link\">Madison Visualization</MDBBtn>\r\n                </MDBCardBody>\r\n            </MDBCard>\r\n            </Col>\r\n            \r\n            </Row>\r\n        </Container>\r\n            \r\n                    \r\n     </section>\r\n    )\r\n}\r\n\r\nexport default DataScienceProjects;\r\n\r\n"],"mappings":";AAAA,SAAQA,GAAG,EAAEC,GAAG,EAAEC,SAAS,QAAO,iBAAiB;AACnD,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,SACEC,OAAO,EACPC,WAAW,EACXC,YAAY,EACZC,YAAY,EACZC,WAAW,EACXC,MAAM,QACD,kBAAkB;AACzB,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,mBAAmBA,CAAA,EAAG;EAC7B,oBACED,OAAA;IAASE,EAAE,EAAC,SAAS;IAAAC,QAAA,eACnBH,OAAA,CAACT,SAAS;MAACa,SAAS,EAAC,OAAO;MAAAD,QAAA,gBAC5BH,OAAA;QAAII,SAAS,EAAC,aAAa;QAAAD,QAAA,EAAC;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5CR,OAAA,CAACX,GAAG;QAACe,SAAS,EAAC,sBAAsB;QAAAD,QAAA,eACnCH,OAAA,CAACV,GAAG;UAACmB,EAAE,EAAE,EAAG;UAACC,EAAE,EAAE,CAAE;UAACC,EAAE,EAAE,CAAE;UAAAR,QAAA,eAC5BH,OAAA,CAACP,OAAO;YAACW,SAAS,EAAC,cAAc;YAACQ,MAAM,EAAC,QAAQ;YAACC,KAAK,EAAE;cAAEC,KAAK,EAAE;YAAM,CAAE;YAAAX,QAAA,gBACtEH,OAAA,CAACL,YAAY;cACboB,GAAG,EAAEvB,aAAc;cACnBwB,QAAQ,EAAC,KAAK;cACdC,GAAG,EAAC;YAAU;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAC,CAAC,eAChBR,OAAA,CAACN,WAAW;cAAAS,QAAA,gBACRH,OAAA,CAACJ,YAAY;gBAAAO,QAAA,EAAC;cAAc;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAc,CAAC,eAC3CR,OAAA,CAACH,WAAW;gBAAAM,QAAA,EAAC;cAGX;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAa,CAAC,eAChBR,OAAA,CAACF,MAAM;gBAACoB,GAAG,EAAC,GAAG;gBAACC,IAAI,EAAC,gDAAgD;gBAACf,SAAS,EAAC,gBAAgB;gBAAAD,QAAA,EAAC;cAAqB;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAED,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGN,CAAC;AAEf;AAACY,EAAA,GA7BQnB,mBAAmB;AA+B5B,eAAeA,mBAAmB;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}